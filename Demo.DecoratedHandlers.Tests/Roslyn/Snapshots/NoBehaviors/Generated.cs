// UNUSED AND CAN BE DELETED
// LEFT AS EXAMPLE OF VALID UNMODIFIED PIPELINE
using System;
using System.Threading;
using System.Threading.Tasks;
using Demo.DecoratedHandlers.Abstractions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Demo.DecoratedHandlers.Gen;

// <auto-generated
namespace Demo.DecoratedHandlers.Tests.Roslyn.Snapshots.NoBehaviors
{ 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Demo.DecoratedHandlers.Gen", "%VERSION%")]
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]
    
    public class BarHandlerPipeline(IServiceProvider provider) : IRequestHandler<Alpha, Omega>
    { 
        public Task<Omega> HandleAsync(Alpha input, CancellationToken ct = default) 
        {
            var handler = provider.GetRequiredService<BarHandler>(); 
            RequestHandlerDelegate<Omega> original = () => handler.HandleAsync(input, ct);

            return original();
        }
    } 

    internal static class ServiceCollectionExtensions_BarHandlerPipeline
    {
        [RegisterThis]
        internal static void ReplaceHandlerWithPipeline(this IServiceCollection services)
        {
            services.ReplaceWithPipeline<IRequestHandler<Alpha, Omega>, BarHandler, BarHandlerPipeline>();
        }
    }
}