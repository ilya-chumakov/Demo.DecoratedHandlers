using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

using Demo.DecoratedHandlers.Abstractions;

// <auto-generated
namespace Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors;

using InterfaceAlias = IRequestHandler<
    global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Alpha,
    global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Omega>;

using DelegateAlias = RequestHandlerDelegate<
    global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Omega>;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Demo.DecoratedHandlers.Gen", "%VERSION%")]
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]

public class BarHandlerPipeline(IServiceProvider provider) : InterfaceAlias
{
    public Task<global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Omega> HandleAsync(
        global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Alpha input,
        CancellationToken ct = default)
    {
        var handler = provider.GetRequiredService<
            global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.BarHandler>(); 

        DelegateAlias original = () => handler.HandleAsync(input, ct);

        var b0 = provider.GetRequiredService<
            global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.LogBehavior<
                global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Alpha,
                global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Omega>>();

        DelegateAlias f0 = () => b0.Handle(input, original, ct);

        var b1 = provider.GetRequiredService<
            global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.ExceptionBehavior<
                global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Alpha,
                global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.Omega>>();

        DelegateAlias f1 = () => b1.Handle(input, f0, ct);

        return f1();
    }
}

internal static class ServiceCollectionExtensions_BarHandlerPipeline
{
    [RegisterThis]
    internal static void ReplaceHandlerWithPipeline(
        this IServiceCollection services)
    {
        services.ReplaceWithPipeline<
            InterfaceAlias,
            global::Demo.DecoratedHandlers.Tests.Snapshots.TwoBehaviors.BarHandler,
            BarHandlerPipeline>();
    }
}