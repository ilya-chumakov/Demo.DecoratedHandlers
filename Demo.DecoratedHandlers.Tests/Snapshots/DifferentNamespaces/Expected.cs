using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

using Demo.DecoratedHandlers.Abstractions;
using Demo.DecoratedHandlers.Gen;
using Demo.DecoratedHandlers.Tests.Snapshots.DifferentNamespaces.RequestNamespace;
using Demo.DecoratedHandlers.Tests.Snapshots.DifferentNamespaces.ResponseNamespace;
using Demo.DecoratedHandlers.Tests.Snapshots.DifferentNamespaces.HandlerNamespace;
using Demo.DecoratedHandlers.Tests.Snapshots.DifferentNamespaces.BehaviorNamespace;

// <auto-generated
namespace Demo.DecoratedHandlers.Tests.Snapshots.DifferentNamespaces;

using InterfaceAlias = IRequestHandler<
    Alpha,
    Omega>;

using DelegateAlias = RequestHandlerDelegate<
    Omega>;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Demo.DecoratedHandlers.Gen", "%VERSION%")]
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Always)]

public class BarHandlerPipeline(global::System.IServiceProvider provider) : InterfaceAlias
{
    public Task<Omega> HandleAsync(
        Alpha input, 
        CancellationToken ct = default)
    {
        var handler = provider.GetRequiredService<
            BarHandler>(); 

        DelegateAlias original = () => handler.HandleAsync(input, ct);

        var b0 = provider.GetRequiredService<
            LogBehavior<
                Alpha,
                Omega>>();

        DelegateAlias f0 = () => b0.Handle(input, original, ct);

        return f0();
    }
}

internal static class ServiceCollectionExtensions_BarHandlerPipeline
{
    [RegisterThis]
    internal static void ReplaceHandlerWithPipeline(
        this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.ReplaceWithPipeline<IRequestHandler<Alpha, Omega>, BarHandler, BarHandlerPipeline>();
    }
}