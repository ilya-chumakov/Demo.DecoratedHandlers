using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Demo.DecoratedHandlers.Gen
{
    public record struct HandlerData(
        string HandlerTypeName, 
        string ParameterTypeName, 
        string OutputNamespace);
    
    public record struct DecoratorData(string TypeName);

    public static class TextBuilder
    {
        public static SourceText CreatePipeline(
            HandlerData handler, 
            IReadOnlyList<DecoratorData> decorators)
        {
            string paramTypeName = handler.ParameterTypeName;
            string handlerTypeName = handler.HandlerTypeName;

            string className = $"{handlerTypeName}Pipeline";
            string targetFunc = "hf";

            var sb = new StringBuilder();
            sb.AppendLine(
$$"""
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Demo.DecoratedHandlers.Gen;
// V3 
// <auto-generated by {{nameof(GenericGenerator)}}/> 
namespace {{handler.OutputNamespace}} //take ns from meta
{ 
    public class {{className}}(IServiceProvider provider) : IGenericHandler<{{paramTypeName}}>
    { 
        public Task HandleAsync({{paramTypeName}} input) 
        {
            var handler = provider.GetRequiredService<{{handlerTypeName}}>(); 
            var {{targetFunc}} = () => handler.HandleAsync(input);
      
""");

            for (int i = 0; i < decorators.Count; i++)
            {
                string currentFunc = $"df{i}";
                string currentDecorator = $"d{i}";
                string name = decorators[i].TypeName;

                sb.AppendLine(
$"""
            var {currentDecorator} = provider.GetRequiredService<{name}>();
            var {currentFunc} = () => {currentDecorator}.HandleAsync({targetFunc});
""");
                targetFunc = currentFunc;
            }

            sb.Append(
$$"""
		    return {{targetFunc}}();
	    }
    } 

    public static class ServiceCollectionExtensions_{{className}}
    {
        [RegisterThis]
        public static void RegisterPipeline(this IServiceCollection services)
        {
            services.RemoveAll<IGenericHandler<{{paramTypeName}}>>();
            services.AddTransient<IGenericHandler<{{paramTypeName}}>, {{className}}>();
            services.AddTransient<{{handlerTypeName}}>();
        }
    }
} 
""");
            return SourceText.From(sb.ToString(), Encoding.UTF8);
        }
    }
}